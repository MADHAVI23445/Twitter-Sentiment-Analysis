# -*- coding: utf-8 -*-
"""Twitter Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ol-VxTF6zjFlwC3LuGPvN-HvPR_qklfN
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import re
import matplotlib.pyplot as plt
import string
import nltk
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("Twitter Sentiments.csv")

df.head(17)

df.info()

df.isnull().sum()

# remove patterns in the input_txt
def remove_pattern(input_txt,pattern):
  r = re.findall(pattern,input_txt)
  for word in r:
    input_txt = re.sub(word,"",input_txt)
  return input_txt

# remove twitter handles(@user)

df['clean_tweet'] = np.vectorize(remove_pattern)(df['tweet'],'@[\word]*')

df.head()

df['clean_tweet'] = df['clean_tweet'].str.replace("[^a-zA-Z#]"," ")
df.head()

df['clean_tweet'] = df['clean_tweet'].apply(lambda x:" ".join([w for w in x.split() if len(w)>3]))
df.head()

tokenized_tweet = df['clean_tweet'].apply(lambda x:x.split())
tokenized_tweet.head()

from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

tokenized_tweet = tokenized_tweet.apply(lambda sentence:[stemmer.stem(word) for word in sentence])
tokenized_tweet.head()

# combine words into single sentence
for i in range(len(tokenized_tweet)):
  tokenized_tweet[i] = " ".join(tokenized_tweet[i])

df['clean_tweet'] = tokenized_tweet
df.head()

all_words = " ".join(sentence for sentence in df['clean_tweet'])

from wordcloud import WordCloud
wordcloud = WordCloud(width=800,height=500,random_state=42,max_font_size=100).generate(all_words)

# plot the graph

plt.figure(figsize=(15,8))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show()

all_words =  " ".join([sentence for sentence  in df['clean_tweet'][df['label']==0]])

from wordcloud import WordCloud
wordcloud = WordCloud(width=800,height=500,random_state=42,max_font_size=100).generate(all_words)

plt.figure(figsize=(12,8))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show()

all_words = ''.join([sentence for sentence in df['clean_tweet'][df['label']==1]])
from wordcloud import WordCloud
wordcloud = WordCloud(width=800,height=500,max_font_size=100,random_state=42).generate(all_words)
plt.figure(figsize=(12,8))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show()

def hastag_extract(tweets):
  hastags = []
  for tweet in tweets:
    ht = re.findall(r'#(\w+)',tweet)
    hastags.append(ht)
  return hastags

hastag_positive = hastag_extract(df['clean_tweet'][df['label']==0])

hastag_negative = hastag_extract(df['clean_tweet'][df['label']==1])

hastag_positive[:5]

ht_positive = sum(hastag_positive,[])
ht_negative = sum(hastag_negative,[])

ht_positive[:5]

freq = nltk.FreqDist(ht_positive)
d = pd.DataFrame({'Hastag':list(freq.keys()),'Count':list(freq.values())})
d.head()

d = d.nlargest(columns='Count',n=10)
plt.figure(figsize=(12,8))
sns.barplot(data=d,x='Hastag',y='Count')
plt.show()

freq = nltk.FreqDist(ht_negative)
d = pd.DataFrame({'Hastag':list(freq.keys()),'Count':list(freq.values())})
d.head()

d = d.nlargest(columns='Count',n=10)
plt.figure(figsize=(12,8))
sns.barplot(data =d,x ='Hastag',y='Count')
plt.show()

from sklearn.feature_extraction.text import CountVectorizer
bow_vector = CountVectorizer(max_df = 0.90,min_df = 2, max_features =1000,stop_words = 'english')
bow = bow_vector.fit_transform(df['clean_tweet'])

bow

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(bow,df['label'],random_state = 42,test_size=0.25)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score,accuracy_score

model = LogisticRegression()
model.fit(X_train,y_train)

pred = model.predict(X_test)
f1_score(y_test,pred)

accuracy_score(y_test,pred)

pred_proba = model.predict_proba(X_test)
pred = pred_proba[:,1]>=0.3
pred = pred.astype(np.int)

f1_score(y_test,pred)

accuracy_score(y_test,pred)

pred_proba[13][1]>=0.3